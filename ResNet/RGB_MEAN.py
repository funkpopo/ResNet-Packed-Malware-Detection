import os
import cv2
import random
import numpy as np
from tqdm import tqdm

# 结合"train.py"文件
# 数据集的位置
# 该脚本并不适用于所有的图片类型，酌情使用
# 在彩色RGB图片上的计算结果更为精准
# 本项目中仅用作权重优化步骤之一的思路描述
dataset_dir = "数据集路径"

# 验证集图像数量
# 数量不定，根据实际情况更改
_NUM_VALIDATION = 8500

# 随机种子，根据实际情况更改
_RANDOM_SEED = 0

def get_filenames_and_classes(dataset_dir):
    flower_root = os.path.join(dataset_dir, '')
    directories = [os.path.join(flower_root, d) for d in os.listdir(flower_root) 
                   if os.path.isdir(os.path.join(flower_root, d))]
    class_names = [os.path.basename(d) for d in directories]

    photo_filenames = [os.path.join(root, f) 
                       for directory in directories 
                       for root, _, files in os.walk(directory) 
                       for f in files if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

    random.seed(_RANDOM_SEED)
    random.shuffle(photo_filenames)
    training_filenames = photo_filenames[_NUM_VALIDATION:]
    # validation_filenames = photo_filenames[:_NUM_VALIDATION]

    return training_filenames

def compute_mean(file_names):
    means = np.zeros(3)
    for file_name in tqdm(file_names, desc="Processing images"):
        img = cv2.imread(file_name, 1)
        means += np.mean(img, axis=(0, 1))
    means /= len(file_names)
    return means[::-1]  # BGR to RGB

if __name__ == '__main__':
    photo_filenames = get_filenames_and_classes(dataset_dir)
    R, G, B = compute_mean(photo_filenames)
    print(f"R_mean: {R:.2f}, G_mean: {G:.2f}, B_mean: {B:.2f}")