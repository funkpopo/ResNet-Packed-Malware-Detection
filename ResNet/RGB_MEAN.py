import os
import cv2
import random
import numpy as np

# 结合”train.py“文件
# 数据集的位置
# 该脚本并不适用于所有的图片类型，酌情使用
# 在彩色RGB图片上的计算结果更为精准
# 本项目中仅用作权重优化步骤之一的思路描述
dataset_dir = "数据集路径"

# 验证集图像数量
# 数量不定，根据实际情况更改
_NUM_VALIDATION = 8500

# 随机种子，根据实际情况更改
_RANDOM_SEED = 0


def _get_filenames_and_classes(dataset_dir):
    flower_root = os.path.join(dataset_dir, '')
    directories = []
    class_names = []
    for filename in os.listdir(flower_root):
        path = os.path.join(flower_root, filename)
        if os.path.isdir(path):
            directories.append(path)
            class_names.append(filename)

    photo_filenames = []
    for directory in directories:
        for filename in os.listdir(directory):
            path = os.path.join(directory, filename)
            photo_filenames.append(path)
            # Divide
    random.seed(_RANDOM_SEED)
    random.shuffle(photo_filenames)
    training_filenames = photo_filenames[_NUM_VALIDATION:]
    # validation_filenames = photo_filenames[:_NUM_VALIDATION]

    return training_filenames


def compute(file_names):
    per_image_Rmean = []
    per_image_Gmean = []
    per_image_Bmean = []
    for file_name in file_names:
        img = cv2.imread(file_name, 1)
        per_image_Rmean.append(np.mean(img[:, :, 0]))
        per_image_Gmean.append(np.mean(img[:, :, 1]))
        per_image_Bmean.append(np.mean(img[:, :, 2]))
    R_mean = np.mean(per_image_Rmean)
    G_mean = np.mean(per_image_Gmean)
    B_mean = np.mean(per_image_Bmean)
    return R_mean, G_mean, B_mean


if __name__ == '__main__':
    photo_filenames = _get_filenames_and_classes(dataset_dir)

    R, G, B = compute(photo_filenames)
    print(R, G, B)
