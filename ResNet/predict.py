import os
import json
import glob
import datetime

import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt


from model import resnet101


def main():
    im_height = "输入的图片高度"
    im_width = "输入的图片宽度"
    num_classes = 2

    img_path = '选取一张切片来测试'
    assert os.path.exists(img_path), "file: '{}' dose not exist.".format(img_path)
    img = Image.open(img_path)
    # resize
    # img = img.resize((im_width, im_height))
    plt.imshow(img)

    _R_MEAN = "所有集合样本中的R均值"
    _G_MEAN = "所有集合样本中的G均值"
    _B_MEAN = "所有集合样本中的B均值"
    img = np.array(img).astype(np.float64)
    img = img - [_R_MEAN, _G_MEAN, _B_MEAN]
    img = (np.expand_dims(img, 0))

    json_path = './class_indices.json'
    assert os.path.exists(json_path), "file: '{}' dose not exist.".format(json_path)

    json_file = open(json_path, "r")
    class_indict = json.load(json_file)

    # create model
    feature = resnet101(num_classes=num_classes, include_top=False)
    feature.trainable = False
    model = tf.keras.Sequential([feature,
                                 tf.keras.layers.GlobalAvgPool2D(),
                                 tf.keras.layers.Dropout(rate=0.5),
                                 tf.keras.layers.Dense(1024, activation="relu"),
                                 tf.keras.layers.Dropout(rate=0.5),
                                 tf.keras.layers.Dense(num_classes),
                                 tf.keras.layers.Softmax()])

    # 载入权重
    weights_path = './save_weights/resNet_50_preweights.ckpt'
    assert len(glob.glob(weights_path + "*")), "cannot find {}".format(weights_path)
    model.load_weights(weights_path)

    # prediction
    result = np.squeeze(model.predict(img))
    predict_class = np.argmax(result)

    print_res = "class: {}   prob: {:.3}".format(class_indict[str(predict_class)],
                                                 result[predict_class])
    plt.title(print_res)
    print(print_res)


if __name__ == '__main__':
    start = datetime.datetime.now()
    main()
    end = datetime.datetime.now()
    # 计时
    print("Time is:", end - start)
    plt.show()
