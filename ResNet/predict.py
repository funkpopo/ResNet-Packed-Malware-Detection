import os
import json
import glob
import datetime
import tensorflow as tf
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from model import resnet101

def load_and_preprocess_image(img_path, im_height, im_width, mean_values):
    assert os.path.exists(img_path), f"File: '{img_path}' does not exist."
    img = Image.open(img_path)
    # Uncomment the following line if you want to resize the image
    # img = img.resize((im_width, im_height))
    img_array = np.array(img).astype(np.float32)
    img_array -= mean_values
    return np.expand_dims(img_array, 0), img

def load_class_indices(json_path):
    assert os.path.exists(json_path), f"File: '{json_path}' does not exist."
    with open(json_path, "r") as json_file:
        return json.load(json_file)

def create_model(num_classes):
    feature = resnet101(num_classes=num_classes, include_top=False)
    feature.trainable = False
    return tf.keras.Sequential([
        feature,
        tf.keras.layers.GlobalAvgPool2D(),
        tf.keras.layers.Dropout(rate=0.5),
        tf.keras.layers.Dense(1024, activation="relu"),
        tf.keras.layers.Dropout(rate=0.5),
        tf.keras.layers.Dense(num_classes),
        tf.keras.layers.Softmax()
    ])

def main():
    im_height = 224  # Replace with actual image height
    im_width = 224   # Replace with actual image width
    num_classes = 2
    img_path = 'path/to/your/test/image.jpg'  # Replace with actual image path
    json_path = './class_indices.json'
    weights_path = './save_weights/resNet_50_preweights.ckpt'

    # Mean values for R, G, B channels
    mean_values = [123.68, 116.779, 103.939]  # Replace with actual mean values

    # Load and preprocess image
    img_tensor, original_img = load_and_preprocess_image(img_path, im_height, im_width, mean_values)

    # Load class indices
    class_indict = load_class_indices(json_path)

    # Create and load model
    model = create_model(num_classes)
    assert len(glob.glob(weights_path + "*")), f"Cannot find {weights_path}"
    model.load_weights(weights_path)

    # Prediction
    result = model.predict(img_tensor)
    predict_class = np.argmax(result)

    # Display results
    print_res = f"Class: {class_indict[str(predict_class)]}   Probability: {result[0][predict_class]:.3f}"
    plt.imshow(original_img)
    plt.title(print_res)
    plt.axis('off')
    print(print_res)
    plt.show()

if __name__ == '__main__':
    start = datetime.datetime.now()
    main()
    end = datetime.datetime.now()
    print("Time taken:", end - start)