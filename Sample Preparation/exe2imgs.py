import os
import numpy as np
from PIL import Image
import binascii
import tkinter as tk
from tkinter import filedialog, messagebox
import hashlib
import shutil

def exe_to_grayscale(exe_path, output_path, width=256):
    with open(exe_path, 'rb') as f:
        content = f.read()
    
    hex_string = binascii.hexlify(content).decode('ascii')
    
    # 将十六进制字符串转换为整数数组
    int_array = np.array([int(hex_string[i:i+2], 16) for i in range(0, len(hex_string), 2)])
    
    # 调整数组形状以适应指定宽度
    height = int(np.ceil(len(int_array) / width))
    int_array = np.pad(int_array, (0, width * height - len(int_array)), 'constant')
    int_array = int_array.reshape((height, width))
    
    # 创建灰度图像
    img = Image.fromarray(int_array.astype('uint8'), 'L')
    img.save(output_path)

def slice_image(image_path, output_dir, slice_height=256):
    img = Image.open(image_path)
    width, height = img.size
    
    for i in range(0, height, slice_height):
        box = (0, i, width, min(i+slice_height, height))
        slice = img.crop(box)
        
        base_name = os.path.splitext(os.path.basename(image_path))[0]
        slice_name = f"{base_name}-{i//slice_height}.png"
        slice_path = os.path.join(output_dir, slice_name)
        
        slice.save(slice_path)

def get_file_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as f:
        for chunk in iter(lambda: f.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def remove_duplicate_images(folder_path):
    hash_dict = {}
    removed_count = 0
    for filename in os.listdir(folder_path):
        if filename.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
            file_path = os.path.join(folder_path, filename)
            file_hash = get_file_md5(file_path)
            if file_hash in hash_dict:
                os.remove(file_path)  # 永久删除文件
                removed_count += 1
            else:
                hash_dict[file_hash] = file_path
    return removed_count

def process_exe_folder(input_folder, output_folder, width=256, slice_height=256):
    if not os.path.exists(output_folder):
        os.makedirs(output_folder)
    
    if not os.path.exists(input_folder):
        messagebox.showerror("Error", f"Input folder not found: {input_folder}")
        return
    
    for filename in os.listdir(input_folder):
        if filename.lower().endswith('.exe'):
            exe_path = os.path.join(input_folder, filename)
            base_name = os.path.splitext(filename)[0]
            grayscale_path = os.path.join(output_folder, f"{base_name}.png")
            
            exe_to_grayscale(exe_path, grayscale_path, width)
            slice_image(grayscale_path, output_folder, slice_height)
    
    removed_count = remove_duplicate_images(output_folder)
    messagebox.showinfo("Success", f"Processing completed! Removed {removed_count} duplicate images.")

def create_gui():
    window = tk.Tk()
    window.title("EXE to Grayscale Image Converter")
    window.geometry("400x250")

    input_folder = tk.StringVar()
    output_folder = tk.StringVar()

    def browse_input():
        folder = filedialog.askdirectory()
        input_folder.set(folder)

    def browse_output():
        folder = filedialog.askdirectory()
        output_folder.set(folder)

    tk.Label(window, text="Input Folder:").pack()
    tk.Entry(window, textvariable=input_folder, width=50).pack()
    tk.Button(window, text="Browse", command=browse_input).pack()

    tk.Label(window, text="Output Folder:").pack()
    tk.Entry(window, textvariable=output_folder, width=50).pack()
    tk.Button(window, text="Browse", command=browse_output).pack()

    tk.Label(window, text="Grayscale Image Width:").pack()
    width_entry = tk.Entry(window)
    width_entry.insert(0, "256")  # 默认值
    width_entry.pack()

    def start_processing():
        try:
            width = int(width_entry.get())
            if width <= 0:
                raise ValueError("Width must be a positive integer")
            if not input_folder.get() or not output_folder.get():
                raise ValueError("Please select both input and output folders")
            process_exe_folder(input_folder.get(), output_folder.get(), width=width)
        except ValueError as e:
            messagebox.showerror("Error", str(e))

    process_button = tk.Button(window, text="Process EXEs", command=start_processing)
    process_button.pack(pady=20)

    window.mainloop()

if __name__ == "__main__":
    create_gui()