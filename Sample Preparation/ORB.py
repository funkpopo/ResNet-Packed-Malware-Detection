import numpy as np
import cv2
import glob
import csv
from PIL import Image

# f = open("orb_pixel.csv", 'w+')
jpg_files = glob.glob("D:/dataset/train/p/*.jpg")
print(len(jpg_files))
with open("Targetpath:/feature_orb.csv", "w", encoding='utf-8',
          newline='') as t:
    title = ['distance', 'pic_1', 'pic_2', 'point_1', 'point_2', 'filename_1', 'filename_2']
    csv_file = csv.writer(t)
    csv_file.writerow(title)
    for j in range(len(jpg_files) - 1):
        # for j in range(20):
        print(j)
        path1 = 'D:/dataset/train/p/{}.jpg'.format(j + 1)
        img1 = cv2.imread(path1)
        img11 = Image.open(path1)
        img11 = img11.convert('RGB')
        j += 1
        print(j)
        img2 = cv2.imread('D:/dataset/train/p/{}.jpg'.format(j + 1))
        img22 = Image.open('D:/dataset/train/p/{}.jpg'.format(j + 1))
        img22 = img22.convert('RGB')

        # 灰度图不需要这一步骤
        # Convert it to grayscale
        # img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
        # img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
        # img1 = cv2.bitwise_not(img1)
        # img2 = cv2.bitwise_not(img2)

        # Initialize the ORB detector algorithm
        orb = cv2.ORB_create()

        # Now detect the keypoints and compute
        # the descriptors for the query image
        # and train image
        queryKeypoints, queryDescriptors = orb.detectAndCompute(img1, None)
        trainKeypoints, trainDescriptors = orb.detectAndCompute(img2, None)
        # print("data type:",type(queryKeypoints[0]))
        # print("关键点坐标：",queryKeypoints[0].pt)

        # keypoints
        # 暴力匹配
        matcher = cv2.BFMatcher()
        matches = matcher.match(queryDescriptors, trainDescriptors)

        # list_total=[]
        # for i in range(20):
        #     if len(matches)!=0:
        #         # print("数据类型:",type(matches[i])) #查看类型
        #         # print("第%d个"%i)
        #         print("描述符之间的距离:",matches[i].distance) # 描述符之间的距离。越小越好。
        #         list.append(matches[i].distance)
        #         # print("图像中描述符的索引:",matches[i].queryIdx) #查询图像中描述符的索引。
        #         # print("第一张图关键点坐标：", queryKeypoints[matches[i].queryIdx].pt)
        #         list.append(queryKeypoints[matches[i].queryIdx].pt)
        #         # print("图像中描述符的索引:", matches[i].trainIdx)  # 查询图像中描述符的索引。
        #         # print("第二张图关键点坐标：", trainKeypoints[matches[i].trainIdx].pt)
        #         list.append(trainKeypoints[matches[i].trainIdx].pt)
        #         # print(list)
        #         list_total.append(list)

        if len(matches) >= 10:
            for i in range(10):
                list_total = []
                value = (
                (matches[i].distance, queryKeypoints[matches[i].queryIdx].pt, trainKeypoints[matches[i].trainIdx].pt,
                 img11.getpixel(queryKeypoints[matches[i].queryIdx].pt),
                 img22.getpixel(trainKeypoints[matches[i].trainIdx].pt),
                 'p_{}.jpg'.format(j), '{}.jpg'.format(j + 1)))
                list_total.append(value)
                csv_file.writerows(list_total)
            # with open("feature.csv", 'w', encoding='utf-8', newline='') as fp:
            #     writer = csv.writer(fp)
            #     writer.writerows(value)

        # for i in range(20):
        #     if len(matches) != 0:
        #         # print(matches[i].distance, queryKeypoints[matches[i].queryIdx].pt, trainKeypoints[matches[i].trainIdx].pt, file=f)
        #         print(matches[i].distance, file=f)
        #         print(queryKeypoints[matches[i].queryIdx].pt, file=f)
        #         print(trainKeypoints[matches[i].trainIdx].pt, file=f)

        # print(len(list_total))
        # title = ["distence", "pic1", "pic2"]
