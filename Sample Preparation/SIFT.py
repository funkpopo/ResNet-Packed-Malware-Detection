import numpy as np
import cv2
import glob
import csv
from PIL import Image

# # read the images
# img1 = cv2.imread('1.png')
# img2 = cv2.imread('2.png')
# f = open("orb_pixel.csv", 'w+')
jpg_files = glob.glob("D:/dataset/train/p/*.jpg")
with open("Targetpath:/feature_sift.csv", "w", encoding='utf-8', newline='') as t:
    title = ['distance', 'pic_1', 'pic_2', 'point_1', 'point_2', 'filename_1', 'filename_2']
    csv_file = csv.writer(t)
    csv_file.writerow(title)
    print(len(jpg_files))

    for j in range(len(jpg_files) - 1):
        # for j in range(20):
        print(j)
        path1 = 'D:/dataset/train/p/{}.jpg'.format(j + 1)
        img1 = cv2.imread(path1)
        img11 = Image.open(path1)
        img11 = img11.convert('RGB')
        j += 1
        print(j)
        img2 = cv2.imread('D:/dataset/train/p/{}.jpg'.format(j + 1))
        img22 = Image.open('D:/dataset/train/p/{}.jpg'.format(j + 1))
        img22 = img22.convert('RGB')
        # convert images to grayscale
        # 灰度图不需要这一步骤
        # img1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
        # img2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)
        # img1 = cv2.bitwise_not(img1)
        # img2 = cv2.bitwise_not(img2)

        # create SIFT object
        sift = cv2.SIFT_create()
        # detect SIFT features in both images
        keypoints_1, descriptors_1 = sift.detectAndCompute(img1, None)
        keypoints_2, descriptors_2 = sift.detectAndCompute(img2, None)

        # create feature matcher
        bf = cv2.BFMatcher(cv2.NORM_L1, crossCheck=True)
        # match descriptors of both images
        matches = bf.match(descriptors_1, descriptors_2)

        # sort matches by distance
        matches = sorted(matches, key=lambda x: x.distance)
        # draw first "N" matches
        # matched_img = cv2.drawMatches(img1, keypoints_1, img2, keypoints_2, matches[:"保留的N个点位"], img2, flags=2)

        if len(matches) >= 10:
            for i in range(10):
                # print(len(matches))
                list_total = []
                # print(img1.shape)
                # (x1,y1) =keypoints_1[matches[i].queryIdx].pt
                # (x2,y2)=keypoints_2[matches[i].trainIdx].pt
                # value = ((matches[i].distance, keypoints_1[matches[i].queryIdx].pt, keypoints_2[matches[i].trainIdx].pt,img1[x1,y1,:] ,img2[x2,y2,:],'p_{}.jpg'.format(j), 'p_{}.jpg'.format(j+1)))
                value = ((matches[i].distance, keypoints_1[matches[i].queryIdx].pt, keypoints_2[matches[i].trainIdx].pt,
                          img11.getpixel(keypoints_1[matches[i].queryIdx].pt),
                          img22.getpixel(keypoints_2[matches[i].trainIdx].pt),
                          'p_{}.jpg'.format(j), '{}.jpg'.format(j + 1)))
                list_total.append(value)
                # csv_file = csv.writer(t)
                csv_file.writerows(list_total)

    # # show the image
    # cv2.imshow('Matches', matched_img)
    # # save the image
    # cv2.imwrite("输出路径与文件名", matched_img)
    # cv2.waitKey(0)
    # cv2.destroyAllWindows()
